z <- c(1,2)
z
mean(z)
z <- c(1,2,y)
z
z <- c()
z
for (i in 3:1256)
{ y<- as.character(x[i,])}
for (i in 3:1256)
{ y1 <- as.character(x[i,])
y2 <- substr(y1, 29, 32)
y3 <- as.numeric(y2)
z <- c(z, y3)}
z
mean(z)
sum(z)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download(fileurl, "data.csv", method="curl")
download.file(fileurl, "data.csv", method="curl")
data = read.csv(data.csv)
data = read.csv("data.csv")
data
summary(data)
summary(data$ACR)
summary(data$AGS)
which(data$ACR < 3 & data$AGS == 6)
NA > 5
NA < 5
which(NA < 5)
install.packages("jpeg")
library(jpeg)
?readJPEG
data <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ")
data <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE)
figureurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(figureurl, "figure.jpg", method="curl")
data <- readJPEG("figure.jpg", native=TRUE)
data
data
names(dara)
names(data)
summary(data)
quantile(data)
quantile(data, c=(0.3,0.8))
quantile(data, c=(0.3,0.8))
quantile(data, probs=c(0.3,0.8))
figureurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(figureurl, "data1.csv", method="curl")
figureurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(figureurl, "data2.csv", method="curl")
GDP <- read.csv("data1.csv")
edu <- read.csv("data2.csv")
names(GPD)
names(edu)
names(GDP)
getwd()
GDp
head(GDP)
GDP$z
GDP$x
GDP$X
merge = merge(GDP, edu, by.x="X", by.y="CountryCode", all=True)
merge = merge(GDP, edu, by.x="X", by.y="CountryCode", all=TRUE)
merge
names(merge)
head(merge)
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
merge
?merge
merge
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
merge = merge(GDP, edu, by.x="X", by.y="CountryCode", all=TRUE)
merge
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
merge
GDP
edu
head(edu)
summary(GDP)
GDP
GDP
head(GDP)
x <- sort(GDP)
x <- sort(GDP$X.2)
x
x <- sort(GDP$X.3)
x
merge = merge(GDP, edu, by.x="X", by.y="CountryCode", all=TRUE)
merge
head(merge)
tail(merge)
names(merge)
merge$X
merge$X == NA
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
merge$X
merge$X
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
merge$X
head(merge$X)
tail(merge$X)
GDP
names(GDP)
names(edu)
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
megre
merge
merge = merge(GDP, edu, by.x="X", by.y="CountryCode")
merge
merge￥X
merge$X
names(GDP)
GDP$Gross.domestic.product.2012
GDP1 <- GDP(,5:194)
GDP1 <- GDP[5:194,]
GPD
GDP1
merge = merge(GDP1, edu, by.x="X", by.y="CountryCode")
MERGE
merge
?sort
order
?order
x <- c(1,2,3)
x[order(x)]
x <- c(3,2,8)
x[order(x)]
names(GDP1)
GDP1[order(GDP1$Gross.domestic.product.2012, decreasing=TRUE)]
GDP1[order(GDP1$Gross.domestic.product.2012, decreasing=TRUE),]
x <- GDP1[order(GDP1$Gross.domestic.product.2012, decreasing=TRUE),]
x
x$X[13]
merge
names(merge)
x <- merge[order(merge$Gross.domestic.product.2012, decreasing=TRUE),]
x[13,]
merge = merge(GDP1, edu, by.x="X", by.y="CountryCode")
x <- merge[order(merge$Gross.domestic.product.2012, decreasing=TRUE),]
x
names(x)
x$X
x <- merge[order(merge$Gross.domestic.product.2012, decreasing=TRUE),]
x
x[13,]
x <- merge[order(merge$Gross.domestic.product.2012, decreasing=TRUE),]
names(x)
x$x
x$Gross.domestic.product.2012
x <- merge[order(as.numeric(merge$Gross.domestic.product.2012), decreasing=TRUE),]
x
x[13,]
x <- merge[order(as.numeric(merge$Gross.domestic.product.2012), decreasing=TRUE),]
merge$Gross.domestic.product.2012
sort(merge$Gross.domestic.product.2012)
y <- merge$Gross.domestic.product.2012
y[1]
y[2]
y[3]
as.numeric(y)
z <- as.numeric(y)
z
sort(z)
z(order(z),)
z(order(z))
z[order(z),]
z[order(z)]
y
z <0 as.numeric(y)
z <- as.numeric(y)
z
y[1]
as.numeric(y[1])
as.digit(y[1])
as.integer(y[1])
y[1]
as.character(y[1])
as.integer(as.character(y[1]))
y <- merge$Gross.domestic.product.2012
z <- as.integer(as.character(y))
z
sort(z)
x <- merge[order(z),]
x
x[14]
x[13,]
names(merge)
which(merge$Income.Group == High income: OECD)
which(merge$Income.Group == "High income: OECD")
mean(merge$[which(merge$Income.Group == "High income: OECD")])
names(merge)
mean(merge$Gross.domestic.product.2012[which(merge$Income.Group == "High income: OECD")])
merge$Gross.domestic.product.2012[which(merge$Income.Group == "High income: OECD")]
x <- merge$Gross.domestic.product.2012[which(merge$Income.Group == "High income: OECD")]
mean(as.integer(as.character(x)))
?cut
x
z
is.interger(z)
is.numeric(z)
cut(x, breaks=quantile(x))
z1 <- cut(z, breaks=quantile(z))
z1
z
cut(x, breaks=quantile(x), include.lowest=TRUE)
cut(z, breaks=quantile(z), include.lowest=TRUE)
cut(z, breaks=quantile(z, probs=c(.2, .4, .6, .8, 1)), include.lowest=TRUE)
?quantile
cut(z, breaks=quantile(z, probs=c(0, .2, .4, .6, .8, 1)), include.lowest=TRUE)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
data2 = mutate(merge, GDPgroup=cut2(z,g=5))
install.packages("library")
install.packages("plyr")
install.packages("plyr")
library(plyr)
data2 = mutate(merge, GDPgroup=cut2(z,g=5))
library(Hmis)
library(Hmisc)
data2 = mutate(merge, GDPgroup=cut2(z,g=5))
data2
table(merge$GDPgroup)
table(data2$GDPgroup)
table(data2$GDPgroup, data2$Income Group)
table(data2$GDPgroup, data2$Income.Group)
x <- c("TRUE", "FALSE")
which(x)
x <- c(TRUE, FALSE)
x
x <- c(TRUE, FALSE)
x
which(x)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileurl, 'data.csv', method="curl")
data <- read.csv("data.csv")
which(data$ACR==3 & data$AGS == 6)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileurl, 'data1.csv', method="curl")
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileurl, 'data2.csv', method="curl")
?read.csv
GDP <- read.csv("data1.csv", row.names==1)
GDP <- read.csv("data1.csv",nrows=190)
GDP
head(GDP)
tail(GDP)
GDP <- read.csv("data1.csv", nrows=190, skip=5)
GDP
head(GDP)
GDP <- read.csv("data1.csv", nrows=190, skip=4)
head(GDP)
tail(GDP)
edu <- read.csv("data2.csv")
head(edu)
tail(edu)
?merge
names(GDP)
names(edu)
mergedData = merge(GDP, edu, by.x="X", by.y="CountryCode" )
mergedData = merge(GDP, edu, by.x="X", by.y="CountryCode")
mergedDate$X
mergedData$X
names(mergedData)
names(GDP)
x.1
GDP.x1
GDP.X.1
GDP$X.1
mergedData[order(as.numeric(as.character(mergedDate$X.1)), decreasing=TRUE)]
mergedData[order(as.numeric(as.character(mergedData$X.1)), decreasing=TRUE)]
mergedData[order(as.numeric(as.character(mergedData$X.1)), decreasing=TRUE),]
x <- mergedData[order(as.numeric(as.character(mergedData$X.1)), decreasing=TRUE),]
x$X1
x$X.1
x$X[13]
x$X[13,]
x$Table.Name[13,]
names(x)
x$Table.Name[13,]
x$Table.Name[13]
mergedData$z
mergedData$X
?len
??length
setwd("/Users/yanwang/Getting-and-Cleaning-Data-Course-Project")
getwd()
data <- read.table(unz(temp, "a1.dat"))
?unz
unz(fileurl)
download(fileurl, dest="dataset.zip", mode="wb")
unzip ("dataset.zip", exdir = "./")
download.file(fileurl, dest="dataset.zip", mode="wb")
download.file(fileurl, "dataset.zip")
download.file(fileurl, "dataset.zip", method="curl")
unzip("dataset.zip")
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileurl, "dataset.zip", method="curl")
unzip("dataset.zip")
?read.table
data <- read.table("/Users/yanwang/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset/train/X_train.txt")
ncol(data)
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
datatrain <- read.table("UCI HAR Dataset/train/X_train.txt")
names(datatrain)
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
library(dplyr)
install.packages("dplyr")
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
m <- cbind(1, 1:7)
m
m <- rbind(1, 1:7)
m
x <- c(1,2,3,)
x <- c(1,2,3,4,5)
x[c(1,3)]
x[c(1,4)]
featurelist <- read.table("UCI HAR Dataset/features.txt")
featurelist
names(featurelist)
grep(mean(), featurelist.V2)
grep("mean()", featurelist$V2)
featurelist$V2[grep("mean()", featurelist$V2)]
featurelist$V2[grep("mean()", featurelist$V2，fixed=TRUE)]
featurelist$V2[grep("mean()", featurelist$V2, fixed=TRUE)]
featurelist$V2[grep("std", featurelist$V2, fixed=TRUE)]
index
index = c(grep("mean()", featurelist$V2，fixed=TRUE), grep("std()", featurelist$V2，fixed=TRUE))
source('~/.active-rstudio-document', echo=TRUE)
dataselected <- dataall(,index)
datatrain <- read.table("UCI HAR Dataset/train/X_train.txt")
labeltrain <- read.table("UCI HAR Dataset/train/y_train.txt")
datatest <- read.table("UCI HAR Dataset/test/X_test.txt")
labeltest <- read.table("UCI HAR Dataset/test/y_test.txt")
dataall <- rbind(datatrain, datatest)
labelall <- rbind(labeltrain, labeltest)
featurelist <- read.table("UCI HAR Dataset/features.txt")
dataselected <- dataall[,index]
name(dataselected)
names(dataselected)
dataall
labelall
?length
length(dataselected[,1])
length(dataselected[1，])
length(dataselected[1,])
featurelist$V2[index]
?rename
colnames(dataselected) <- featurelist$V2[index]
dataselected
names(dataselected)
### labelall <- rbind(labeltrain, labeltest)
labellist <- read.table("activity_labels.txt")
labellist <- read.table("UCI HAR Dataset/activity_labels.txt")
labellist
V1 == c(1,2,3)
labellist$V1 == c(1,2,3)
labellist$V1 == c(1)
labellist$V1 == c(2)
length(labellist)
length(labellist$v1)
length(labellist$V1)
labelall == 1
sum(labelall == 1)
for (i in 1:length(labellist$V1)){
index <- (labelall == labellist$V1[i])
labelall[index] <- labellist$V2[i]
}
labelall
index
index
labelall
for (i in 1:length(labellist$V1)){
index <- (labelall == labellist$V1[i])
labelall[index] <- labellist$V2[i]
}
labelall
labelall[1] <- labellist$V2[1]
labelall[1]
labelall[1] <- labellist$V2[1]
labelall[1]
labellist$V2[1]
length(labelall)
labelall
names(labelall)
for (i in 1:length(labellist$V1)){
index <- (labelall$V1 == labellist$V1[i])
labelall$V1[index] <- labellist$V2[i]
}
labelall
labelall$Vq
labelall$V1
labelall$V1[1]
labelall$V1[2]
labelall$V1[3]
labelall$V1[5]
labelall$V1[12]
labelall$V1[146]
for (i in 1:1{
index <- (labelall$V1 == labellist$V1[i])
labelall$V1[index] <- labellist$V2[i]
}
for (i in 1:1){
index <- (labelall$V1 == labellist$V1[i])
labelall$V1[index] <- labellist$V2[i]
}
index
sum(index)
index
for (i in 2){
index <- (labelall$V1 == labellist$V1[i])
labelall$V1[index] <- labellist$V2[i]
}
index
sum(index)
for (i in 6){
index <- (labelall$V1 == labellist$V1[i])
labelall$V1[index] <- labellist$V2[i]
}
sum(index)
labelall$V1
newlabel$V1[index] <- labellist$V2[i]
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
index
i
index
newlabel$V1[index]
newlabel$V1
labelall$V1
labellist$V1[i]
index
names(newlabel)
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
newnlabel
newlabel
for (i in 1)){
index <- (labelall$V1 == labellist$V1[i])
newlabel$V1[index] <- labellist$V2[i]
}
for (i in 1){
index <- (labelall$V1 == labellist$V1[i])
newlabel$V1[index] <- labellist$V2[i]
}
i
index
newlabel
newlabel$V1[index]
labellist$V1[i]
is.numerci(labellist$V1[i])
is.numeric(labellist$V1[i])
is.numeric(labelall$V1)
labelall$V1[index]
labellist$V2[i]
newlabel$V1[index]
for (i in 1:length(labellist$V1)){
index <- (labelall$V1 == labellist$V1[i])
newlabel$V1[index] <- labellist$V2[i]
}
is.mumeric(labellist$V2[i])
is.numeric(labellist$V2[i])
is.numericnewlabel$V1[index]
is.numeric(newlabel$V1[index])
is.character(labellist$V2[i])
as.character(labellist$V2[i])
newlabel$V1[index] <- as.character(labellist$V2[i])
newlabel$V1[index]
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
newlabel
source('~/.active-rstudio-document', echo=TRUE)
names(ActivityDataSet)
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
names(ActivityDataSet)
ActivityDataSet[,1]
ActivityDataSet[,2]
?group_by
group <- group_by(ActivityDataSet, subject, activity)
group
?summarize
source('~/.active-rstudio-document', echo=TRUE)
summarize(group, mean())
?summarize_each
?summarise_each
summarise_each(group, funs(mean)
summarise_each(group, funs(mean))
summarise_each(group, funs(mean))
source('~/.active-rstudio-document', echo=TRUE)
ActivityMean
names(ActivityMean)
ActivityMean[,1]
ActivityMean[,2]
ActivityMean[,3]
ActivityMean[,4]
ActivityMean[,5]
ActivityMean[,6]
ActivityMean[,7]
ActivityMean[,8]
ActivityMean[,9]
ActivityMean[,10]
ActivityMean[,11]
ActivityMean[,66]
ActivityMean[,67]
ActivityMean[,68]
ActivityMean[,69]
ActivityMean[,68]
ActivityMean[,1]
ActivityMean[,2]
git add -A
?write.table
write.table(ActivityMean, "ActivityMean.txt", row.names=False)
write.table(ActivityMean, "ActivityMean.txt", row.names=FALSE)
