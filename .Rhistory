x <- aggregate(data$steps, by=list(data$date), FUN=sum)
x
x <- aggregate(data$steps, by=list(data$date), FUN=sum. na.rm=1)
x <- aggregate(data$steps, by=list(data$date), FUN=sum. na.rm=1)
x <- aggregate(data$steps, by=list(data$date), FUN=sum, na.rm=1)
x
x <- aggregate(data$steps, by=data$date, FUN=sum, na.rm=1)
x <- aggregate(data$steps, by=list(data$date), FUN=sum, na.rm=1)
x <- aggregate(data$steps, by=list(data$date), FUN=sum)
x
stepsperday <- aggregate(data$steps, by=list(data$date), FUN=sum)
stepsperday
stepsperday$x
stepsperinterval <- aggregate(data$steps, by=list(data$date), FUN=mean)
stepsperinterval
stepsperinterval <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=1)
stepsperinterval
?ggplot2
install.packages("ggplot2")
library(ggplot2)
?ggplot2
??ggplot2
ggplot
?ggplor
?ggplot
ggplot(stepsperinterval)
ggplot(stepsperinterval)\
?plot
ggplot(stepsperinterval$x)
plot(stepsperinterval$x, stepsperinterval$x)
?plot
plot(stepsperinterval$x, stepsperinterval$x,"l")
?plot
x == na
x == NA
x <- 1
x == NA
is.na(x)
?length
1:length(data$steps)
for (i in 1:length(data$steps)){
if is.na(data$steps[1]){
}
}
for (i in 1:length(data$steps)){
if (is.na(data$steps[i])){
}
}
?weekdays
data$date
weekdays(data$date)
weekdays(as.vector(data$date))
weekdays(data$date[2])
data$date[1]
data$date[2]
data$date[[2]
]
data$date
stepsperday$Group1
stepsperday$Group.1
stepsperday$Group.1[1]
data <- read.csv("activity.csv", sep = ",")
data$date[1]
data$date[2]
Date
?Date
weekdays("2012-02-21")
weekdays("2012-02-21", "y/m/d")
weekdays("2012-02-21", "%y %m %d")
weekdays("2012-02-21", "%y--%m--%d")
weekdays(as.date("2012-02-21")
weekdays(as.date("2012-02-21"))
weekdays(as.date("2012-02-21"))
weekdays(as.Date("2012-02-21"))
weekdays(as.Date(2012-02-21))
weekdays(as.Date(data$date[1]))
weekdays(as.Date(data$date)
)
stepsperday <- aggregate(data$steps, by=list(data$date), FUN=sum)
weekdays(stepsperinterval$Group.1)
weekdays(stepsperinterval$Group.1) == "Mon"
TRUE + FALSE
TRUE + TRUE
FALSE + FALSE
FALSE & FALSE
whetherweekend <- (weekdays(stepsperinterval$Group.1) == "Sat" & (weekdays(stepsperinterval$Group.1) == "Sun"
)
)
whetherweekend
whetherweekend <- (weekdays(stepsperinterval$Group.1) == "Sat" || (weekdays(stepsperinterval$Group.1) == "Sun")
)
whetherweekend <- (weekdays(stepsperinterval$Group.1) == "Sat") || (weekdays(stepsperinterval$Group.1) == "Sun")
whetherweekend
whetherweekend <- (weekdays(stepsperinterval$Group.1) == "Sat") | (weekdays(stepsperinterval$Group.1) == "Sun")
whetherweekend
whetherweekend <- (weekdays(stepsperinterval$Group.1) == "Sat") | (weekdays(stepsperinterval$Group.1) == "Sun")
days <- factor(whetherweekend, labels=c("weekdays", "weekend"))
days
stepsperinterval$Group.1
stepsperday <- aggregate(data$steps, by=list(data$date), FUN=sum)
stepsperday
whetherweekend <- (weekdays(stepsperday$Group.1) == "Sat") | (weekdays(stepsperday$Group.1) == "Sun")
whetherweekend <- (weekdays(as.Date(stepsperday$Group.1)) == "Sat") | (weekdays(as.Date(stepsperday$Group.1)) == "Sun")
whetherweekend
weekdays(as.Date(stepsperday$Group.1))
whetherweekend <- (weekdays(as.Date(stepsperday$Group.1)) == "Saturday") | (weekdays(as.Date(stepsperday$Group.1)) == "Sunday")
whetherweekend
data
weekdays(as.Date(data$Date[1]))
weekdays(as.Date(data$date[1]))
days
stepsperday$Group.1
weekdays(as.Date(stepsperday$Group.1))
whetherweekend <- (weekdays(as.Date(stepsperday$Group.1)) == "Saturday") | (weekdays(as.Date(stepsperday$Group.1)) == "Sunday")
whetherweeken
whetherweekend
days <- factor(whetherweekend, labels=c("weekday", "weekend"))
days
whetherweekend <- (weekdays(as.Date(data$date)) == "Saturday") | (weekdays(as.Date(data$date)) == "Sunday")
days <- factor(whetherweekend, labels=c("weekday", "weekend"))
days
data$days <- factor(whetherweekend, labels=c("weekday", "weekend"))
data
data[]
data[1]
data[1,]
split(data, data$days)
x <- split(data, data$days)
x
x$weekday
x$weekday$date
stepsperintervalweekday <- aggregate(groups$weekday$steps, by=list(groups$weekday$interval), FUN=mean)
stepsperintervalweekend <- aggregate(groups$weekend$steps, by=list(groups$weekend$interval), FUN=mean)
groups <- split(data, data$days)
stepsperintervalweekday <- aggregate(groups$weekday$steps, by=list(groups$weekday$interval), FUN=mean)
stepsperintervalweekend <- aggregate(groups$weekend$steps, by=list(groups$weekend$interval), FUN=mean)
stepsperintervalweekday
stepsperintervalweekday <- aggregate(groups$weekday$steps, by=list(groups$weekday$interval), FUN=mean, na.rm=1)
stepsperintervalweekday
instll.packages("lattice")
install.packages("lattice")
library(lattice)
?xyplot
?which.max
Create a new dataset that is equal to the original dataset but with the missing data filled in.
install.packages(httr)
getwd()
setwd("/Users/yanwang/httr")
install.packages(httr)
setwd("/Users/yanwang/httr/httr.Rproj")
setwd("/Users/yanwang/httr/R")
install.packages(httr)
library("httr")
setwd("/Users/yanwang/httr")
library("httr")
?httr
??httr
install.packages(httr)
library("httr")
install.packages("httr")
?httpuv
??httpuv
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
getwd)_
getwd()
devtools
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("hadley/httr")
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE))
?get
library(httr)
library(httr)
install.packages("httr")
install.packages("httr")
library(httr)
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
getwd()
setwd("/Users/yanwang/httr/")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
secret = "9134b994013991beebf1b443463f939aefe0bce0")
56b637a5baffac62cad9
56b637a5baffac62cad9
getwd()
getwd("/Users/yanwang/httr/")
getwd("/Users/yanwang/httr")
setwd("/Users/yanwang/httr")
library(httr)
key = "cbe6bbefd25f021be8fc",
56b637a5baffac62cad9
56b637a5baffac62cad9
library(httr)
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
key = "5cbe6bbefd25f021be8fc",
library(httr)
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "cbe6bbefd25f021be8fc",
secret = "9134b994013991beebf1b443463f939aefe0bce0")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "cbe6bbefd25f021be8fc",
secret = "9134b994013991beebf1b443463f939aefe0bce0")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "cbe6bbefd25f021be8fc",
secret = "9134b994013991beebf1b443463f939aefe0bce0")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
[[1]]
[[1]]$id
x <- context(req)
x <- content(req)
x
x[[1]]
x[[1]]$date_created
x[[3]]$date_created
x[[3]]$private
x[[3]]$html_url
x[[1]]$html_url
x[[1]]$id
x[[1]]$teams_url
x[[1]]$name
length(x)
for (i = 1:30)
for (i = 1:30){}
for (i = 1:30){}
for (i = 1:30){
for (i = 1:30){if (x[[i]]$name = "datasharing"){i}}
for(i=1:30){if(x[[i]]$name="datasharing"){i}}
for(i=1:30){}
for(i in 1:30){if(x[[i]]$name="datasharing"){i}}
for(i in 1:30){if(x[[i]]$name=="datasharing"){i}}
i
for(i in 1:30){if(x[[i]]$name=="datasharing"){y <- i}}
y
x[[6]]$name
x[[6]]$data_created
x[[6]]$date_created
x[[6]]$created_at
install.packages("RMySQL")
library(RMySQL)
install.packages("sqldf")
library(sqldf)
?sqldf
fileurl="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurl)
download.file(fileurl, '\data2')
download.file(fileurl, "data2.csv", method = "curl")
getwd)_
getwd()
setwd("/Users/yanwang/")
getwd
getwd()
acs <- read.csv("data2.csv")
acs
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs")
library(RMYSQL)
library(RMySQL)
library(sqldf)
sqldf("select distinct pwgtp1 from acs")
library(sqldf)
sqldf("select distinct pwgtp1 from acs")
acs <- read.csv(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv)
acs <- read.csv(/data2.csv)
acs <- read.csv("/data2.csv")
acs <- read.csv("~/data2.csv")
qldf("select unique AGEP from acs")
sqldf("select unique AGEP from acs")
summary(acs)
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
x <- unique(acs$AGEP)
head(x)
y <- sqldf("select distinct AGEP from acs")
head(y)
nchar("drfr")
?readLine
?readLines
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
x <- readLines(con)
close(con)
x
x[1]
x[2]
x[180]
nchar(x[10])
nchar(x[20])
nchar(x[0])
nchar(x[30])
nchar(x[100])
x[1][1]
x[180]
x[180][1]
x[180][2]
x[180][3]
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
fileurl="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileurl, "data.csv", method = "curl")
getwd()
?read.csv
read.table("data.csv")
x <- read.table("data.csv", header="True")
x <- read.table("data.csv", header=True)
x <- read.table("data.csv", header=TRUE)
x <- read.table("data.csv", skip=1)
x <- read.table("data.csv", skip=2)
x <- read.csv("data.csv")
x
x[,4]
x[,5]
x[[,3]]
x[1
]
head(x)
x[1]
x[1,1]
x[1,2]
x[1,3]
x[2,1]
x[3,]
x[4,1]
x[5,1]
x[5,1][1]
x[5,1][4]
x[5,1][3]
x[5,1]
x[5,2]
x[2,1]
x[2]
x[2,1]
x[3,1]
x[end,1]
x[3:,1]
ischar(x[3m1])
ischar(x[3,1])
?as.char
?as.numeric
is.number
?is.numeric
is.char
?is.char
?as.string
?ks.string
?is.string
?is.character
is.character(x[3,1])
is.numeric(x[3,1])
length(x[3,1])
nchar(x[3,1])
as.character(x[3,1])
y <- as.character(x[3,1])
y[]
y[1]
y[2]
y[[1]]
nchar(y)
?substr
substr(y,2,3)
substr(y,10,14)
substr(y,15,14)
substr(y,20,14)
substr(y,21,14)
substr(y,25,14)
" 03JAN1990     23.4-0.4     25.1-0.3     26.6 0.0     28.6 0.3"
substr(y,23,14)
substr(y,31,32)
substr(y,23,23)
substr(y,23,26)
substr(y,31,34)
substr(y,29,34)
substr(y,29,32)
x
y <- as.character(x)
y
x
length(x)
x
x[1256]
x[1256,]
x[2,]
x[3,]
for (i in 3:1256)
{ y<- as.character(x[i,])}
substr(y,29,32)
as.numerix(substr(y,29,32))
as.numeric(substr(y,29,32))
z <- c(1,2)
z
mean(z)
z <- c(1,2,y)
z
z <- c()
z
for (i in 3:1256)
{ y<- as.character(x[i,])}
for (i in 3:1256)
{ y1 <- as.character(x[i,])
y2 <- substr(y1, 29, 32)
y3 <- as.numeric(y2)
z <- c(z, y3)}
z
mean(z)
sum(z)
source('~/Getting-and-Cleaning-Data-Course-Project/run_analysis.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(activitystring )
names(activitystring)
names(ActivityMean)
getwd()
setwd("/Users/yanwang/Getting-and-Cleaning-Data-Course-Project")
tail(ActivityMean)
head(ActivityMean)
head(ActivityMean, 10)
32. fBodyAccMag-mean(): mean of the Fast Fourier Transform of the magnitude of the body acceleration Jerk signal
